import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils import executor
from middleware import SubscriptionMiddleware
from constants import TOKEN, CHANNEL_ID, ADMIN_ID
from keyboards import (subscribe_keyboard,
                       main_keyboard,
                       games_keyboard,
                       back_button,
                       play_button,
                       back_button_form,
                       back_button_form_admin,
                       payment,
                       back_menu,
                       payment_admin,
                       main_keyboard_admin,
                       admin_panel,
                       admin_panel_tasks,
                       back_menu_admin,
                       task_keyboard,
                       task_keyboard_delete
)
from database import (
    insert_user,
    find_user,
    get_info,
    update_balance,
    insert_game,
    get_games,
    update_game,
    delete_games,
    generate_ticket_id,
    get_tickets,
    delete_ticket,
    set_balance,
    count_tasks,
    add_task,
    set_link,
    get_tasks,
    get_task,
    insert_completed,
    get_completed_tasks,
    get_task_private,
    update_completed,
    delete_task,
    add_referral
)

class ClientStates(StatesGroup):
    bet = State()
    predict = State()
    game = State()
    name = State()
    link = State()

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=MemoryStorage())

error_messages = {}
administrators = {
    "developer": ADMIN_ID
}

dp.middleware.setup(SubscriptionMiddleware(CHANNEL_ID, subscribe_keyboard))

async def check_subscription_start(user_id):
    try:
        user_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ: {user_status.status}")
        return user_status.status in ["member", "administrator", "creator"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.callback_query_handler(lambda c: c.data == "check")
async def check_subscription_callback(callback_query: CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        user_status = await bot.get_chat_member(CHANNEL_ID, user_id)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {user_status}")

        if user_status.status in ["member", "administrator", "creator"]:
            await bot.answer_callback_query(
                callback_query.id,
                text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                show_alert=True
            )
        else:
            await bot.answer_callback_query(
                callback_query.id,
                text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                show_alert=True
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_subscription_callback: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.",
            show_alert=True
        )

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    print(f"–¢–∏–ø message: {type(message)}")
    try:
        user_id = message.from_user.id
        admin_id = administrators.get("developer", 0)

        args = message.get_args()
        referrer_id = int(args) if args.isdigit() else None

        if referrer_id and referrer_id != user_id:
            print("REF: ", referrer_id)
            add_referral(referrer_id)
            await bot.send_message(
                chat_id=referrer_id,
                text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}."
            )

        is_subscribed = await check_subscription_start(user_id)
        print(f"User subscription status: {is_subscribed}")

        if not is_subscribed:
            await bot.send_message(
                chat_id=user_id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                reply_markup=subscribe_keyboard()
            )
            return

        if user_id == int(admin_id):
            print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—à–µ–ª.")
            await bot.send_message(
                chat_id=user_id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                reply_markup=main_keyboard_admin()
            )
            return

        print("–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª.")
        await bot.send_message(
            chat_id=user_id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
            reply_markup=main_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await bot.send_message(
            chat_id=message.from_user.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

#cabinet callback
@dp.callback_query_handler(lambda c: c.data == "cabinet")
async def cabinet_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    admin_id = administrators.get('developer')
    if user_id == int(admin_id):
        try:
            if find_user(user_id=user_id):
                chat_id = callback_query.message.chat.id
                user_data = get_info(user_id)

                first_name = callback_query.from_user.first_name
                balance = user_data["balance"]
                invited_referals = user_data["invited_referals"]
                completed_tasks = user_data["completed_tasks"]

                cabinet_message = (
                    f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n"
                    f"üìã *–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance} $ADREF*\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{invited_referals}*\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *{completed_tasks}*\n\n"
                    f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
                )

                try:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=callback_query.message.message_id,
                        text=cabinet_message,
                        reply_markup=main_keyboard_admin(),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await bot.answer_callback_query(
                        callback_query.id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True
                    )
            else:
                try:
                    insert_user(user_id=user_id)
                    if find_user(user_id=user_id):
                        chat_id = callback_query.message.chat.id
                        user_data = get_info(user_id)

                        first_name = callback_query.from_user.first_name
                        balance = user_data["balance"]
                        invited_referals = user_data["invited_referals"]
                        completed_tasks = user_data["completed_tasks"]

                        cabinet_message = (
                            f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n"
                            f"üìã *–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance} $ADREF*\n"
                            f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{invited_referals}*\n"
                            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *{completed_tasks}*\n\n"
                            f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
                        )

                        try:
                            await bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=callback_query.message.message_id,
                                text=cabinet_message,
                                reply_markup=main_keyboard_admin(),
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            await bot.answer_callback_query(
                                callback_query.id,
                                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                show_alert=True
                            )

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    await bot.answer_callback_query(
                        callback_query.id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True
                    )
                chat_id = callback_query.message.chat.id
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n',
                    reply_markup=main_keyboard_admin(),
                    parse_mode='Markdown',
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await bot.answer_callback_query(
                callback_query.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
    else:
        try:
            if find_user(user_id=user_id):
                chat_id = callback_query.message.chat.id
                user_data = get_info(user_id)

                first_name = callback_query.from_user.first_name
                balance = user_data["balance"]
                invited_referals = user_data["invited_referals"]
                completed_tasks = user_data["completed_tasks"]

                cabinet_message = (
                    f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n"
                    f"üìã *–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
                    f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance} $ADREF*\n"
                    f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{invited_referals}*\n"
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *{completed_tasks}*\n\n"
                    f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
                )

                try:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=callback_query.message.message_id,
                        text=cabinet_message,
                        reply_markup=main_keyboard(),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await bot.answer_callback_query(
                        callback_query.id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True
                    )
            else:
                try:
                    insert_user(user_id=user_id)
                    if find_user(user_id=user_id):
                        chat_id = callback_query.message.chat.id
                        user_data = get_info(user_id)

                        first_name = callback_query.from_user.first_name
                        balance = user_data["balance"]
                        invited_referals = user_data["invited_referals"]
                        completed_tasks = user_data["completed_tasks"]

                        cabinet_message = (
                            f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n"
                            f"üìã *–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
                            f"üí∞ –ë–∞–ª–∞–Ω—Å: *{balance} $ADREF*\n"
                            f"üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: *{invited_referals}*\n"
                            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: *{completed_tasks}*\n\n"
                            f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
                        )

                        try:
                            await bot.edit_message_text(
                                chat_id=chat_id,
                                message_id=callback_query.message.message_id,
                                text=cabinet_message,
                                reply_markup=main_keyboard(),
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            await bot.answer_callback_query(
                                callback_query.id,
                                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                show_alert=True
                            )

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
                    await bot.answer_callback_query(
                        callback_query.id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        show_alert=True
                    )
                chat_id = callback_query.message.chat.id
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{callback_query.from_user.first_name}*!\n\n–í–∞—à –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n',
                    reply_markup=main_keyboard(),
                    parse_mode='Markdown',
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await bot.answer_callback_query(
                callback_query.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )

# games
@dp.callback_query_handler(lambda c: c.data == "games")
async def games_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        user_data = get_info(user_id)
        if not user_data:
            await bot.answer_callback_query(
                callback_query.id,
                text="–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.",
                show_alert=True
            )
            return

        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É üéÆ:",
            reply_markup=games_keyboard()
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–∏–Ω–∏-–∏–≥—Ä: {e}")
        await bot.answer_callback_query(
            callback_query.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )

@dp.callback_query_handler(lambda c: c.data in ["dice", "basketball", "football", "wheel_of_fortune", "coin_toss", "roulette", "guess_number", "lucky_ticket"])
async def game_rules_callback(callback_query: CallbackQuery, state: FSMContext):
    game = callback_query.data
    user_id = callback_query.from_user.id
    await state.set_state(ClientStates.game)
    await state.update_data(game=game)
    game_info = {
            'user_id': user_id,
            'bet': 0,
            'result_value': 'tbd',
            'result_status': False,
            'counter': 0,
            'game': game
        }
    if get_games(user_id=user_id):
        pass
    else:
        insert_game(game_info)
    
    rules = {
        "dice": "üé≤ *–ö—É–±–∏–∫*: –ë—Ä–æ—Å—å—Ç–µ –∫—É–±–∏–∫ –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–µ —á–∏—Å–ª–æ –≤—ã–ø–∞–¥–µ—Ç\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö2*\\.",
        "basketball": "üèÄ *–ë–∞—Å–∫–µ—Ç–±–æ–ª*: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–±—Ä–æ—Å–∏—Ç—å –º—è—á –≤ –∫–æ—Ä–∑–∏–Ω—É\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö1\\.75*\\.",
        "football": "‚öΩ *–§—É—Ç–±–æ–ª*: –ó–∞–±–µ–π—Ç–µ –≥–æ–ª –≤ –≤–æ—Ä–æ—Ç–∞\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö1\\.5*\\.",
        "wheel_of_fortune": "üé° *–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã*: –ò—Å–ø—ã—Ç–∞–π—Ç–µ —Å–≤–æ—é —É–¥–∞—á—É\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö3*\\.",
        "coin_toss": "ü™ô *–ú–æ–Ω–µ—Ç–∫–∞*: –û—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞?\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö1\\.5*\\.",
        "roulette": "üé∞ *–†—É–ª–µ—Ç–∫–∞*: –°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –∏ –∏—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *x3\\.2*\\.",
        "guess_number": "üî¢ *–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ*: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö1\\.66*\\.",
        "lucky_ticket": "üéüÔ∏è *–°—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç*: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∏–Ω–µ—Å–µ—Ç –ª–∏ –≤–∞–º —É–¥–∞—á—É –≤–∞—à –±–∏–ª–µ—Ç\\!\n\n–ö–æ–µ—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç \\- *—Ö100*\\.",
    }
    text = rules.get(game, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π –∏–≥—Ä–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="MarkdownV2",
        reply_markup=play_button
    )
    await state.reset_state()

@dp.callback_query_handler(lambda c: c.data == "play_button")
async def make_bet(callback_query: types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        await ClientStates.bet.set()
        user_data = get_info(callback_query.from_user.id)
        msg = await callback_query.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ *$ADREF*\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ \\- 5 *$ADREF*\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ \\- {user_data.get('balance')} *$ADREF*\\.",
            reply_markup=back_button_form,
            parse_mode='MarkdownV2',
        )
        data['id_to_edit'] = msg.message_id
        

@dp.message_handler(state=ClientStates.bet)
async def bet(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        bet_amount = message.text.strip()
        user_balance = int(get_info(user_id=user_id).get('balance'))
        chat_id = message.chat.id
        if not bet_amount.isdigit():
            error_msg = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å–∏–º–≤–æ–ª!"
            id_msg = await message.answer(error_msg, reply_markup=None)

            if user_id not in error_messages:
                    error_messages[user_id] = []
            error_messages[user_id].append(id_msg.message_id)

            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            return

        bet_amount = int(bet_amount)

        if bet_amount < 5:
            error_msg = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 5 $ADREF!"
            id_msg = await message.answer(error_msg, reply_markup=None)

            if user_id not in error_messages:
                    error_messages[user_id] = []
            error_messages[user_id].append(id_msg.message_id)

            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            return

        if bet_amount > user_balance:
            error_msg = f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏. –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} $ADREF."
            id_msg = await message.answer(error_msg, reply_markup=None)

            if user_id not in error_messages:
                    error_messages[user_id] = []
            error_messages[user_id].append(id_msg.message_id)

            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            return

        if user_id in error_messages:
            try:
                for message_id in error_messages[user_id]:
                    await message.bot.delete_message(chat_id, message_id)
                del error_messages[user_id]
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

        data['bet'] = bet_amount
        update_game(user_id=user_id, amount=data['bet'], status="bet")
        user_game_state = get_games(user_id=user_id).get('game')

        chat_id = message.chat.id
        text = ""
        if user_game_state == "dice":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé≤ –ö—É–±–∏–∫.\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é –≤—ã–ø–∞–¥–µ—Ç."
        elif user_game_state == "basketball":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–ø–∞–¥–µ—Ç –ª–∏ –º—è—á –≤ –∫–æ–ª—å—Ü–æ *(–î–ê/–ù–ï–¢)*."
        elif user_game_state == "football":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ‚öΩ –§—É—Ç–±–æ–ª.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–ø–∞–¥–µ—Ç –ª–∏ –º—è—á –≤ –≤–æ—Ä–æ—Ç–∞ *(–î–ê/–ù–ï–¢)*."
        elif user_game_state == "wheel_of_fortune":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –≤—ã–∏–≥—Ä–∞–µ—Ç."
        elif user_game_state == "coin_toss":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ü™ô –ú–æ–Ω–µ—Ç–∫–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –≤—ã–ø–∞–¥–µ—Ç *–û–†–ï–õ* –∏–ª–∏ *–†–ï–®–ö–ê*."
        elif user_game_state == "roulette":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé∞ –†—É–ª–µ—Ç–∫–∞.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä , –∫–æ—Ç–æ—Ä—ã–π, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –≤—ã–ø–∞–¥–µ—Ç."
        elif user_game_state == "guess_number":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ.\n\n–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ, –ø–æ –≤–∞—à–µ–º—É –º–Ω–µ–Ω–∏—é, –∑–∞–≥–∞–¥–∞–Ω–æ."
        elif user_game_state == "lucky_ticket":
            text = "–≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üéüÔ∏è –°—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –±–∏–ª–µ—Ç–∞."

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=data.get('id_to_edit'),
            text=f"–£—Å–ø–µ—à–Ω–æ!\nüìà –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å—Ç–∞–≤–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ - *{data['bet']} $ADREF*\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {text}",
            reply_markup=back_button_form,
            parse_mode='Markdown',
        )
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.reset_state()
        await ClientStates.predict.set()

@dp.message_handler(state=ClientStates.predict)
async def bet(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_id = message.from_user.id
        user_game_state = get_games(user_id).get('game')
        chat_id = message.chat.id
        prediction = message.text.strip()

        if user_game_state == "dice":
            if not prediction.isdigit() or not 1 <= int(prediction) <= 6:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6 –¥–ª—è –∏–≥—Ä—ã –≤ üé≤ –ö—É–±–∏–∫."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "basketball" or user_game_state == "football":
            if prediction not in ["–î–ê", "–ù–ï–¢"]:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –î–ê –∏–ª–∏ –ù–ï–¢ –¥–ª—è –∏–≥—Ä—ã –≤ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª –∏–ª–∏ ‚öΩ –§—É—Ç–±–æ–ª."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)
                
                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "wheel_of_fortune":
            if not prediction.isdigit() or not 1 <= int(prediction) <= 12:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12 –¥–ª—è –∏–≥—Ä—ã –≤ üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "coin_toss":
            if prediction not in ["–û–†–ï–õ", "–†–ï–®–ö–ê"]:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –û–†–ï–õ –∏–ª–∏ –†–ï–®–ö–ê –¥–ª—è –∏–≥—Ä—ã –≤ ü™ô –ú–æ–Ω–µ—Ç–∫—É."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "roulette":
            if not prediction.isdigit() or not 0 <= int(prediction) <= 36:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36 –¥–ª—è –∏–≥—Ä—ã –≤ üé∞ –†—É–ª–µ—Ç–∫—É."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "guess_number":
            if not prediction.isdigit() or not 1 <= int(prediction) <= 9:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9 –¥–ª—è –∏–≥—Ä—ã –≤ üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return
        elif user_game_state == "lucky_ticket":
            if not prediction.isdigit() or not 1 <= int(prediction) <= 999:
                error_msg = "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 999 –¥–ª—è –∏–≥—Ä—ã –≤ üéüÔ∏è –°—á–∞—Å—Ç–ª–∏–≤—ã–π –±–∏–ª–µ—Ç."
                id_msg = await message.answer(error_msg, reply_markup=None)

                if user_id not in error_messages:
                        error_messages[user_id] = []
                error_messages[user_id].append(id_msg.message_id)

                await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                return

        if user_id in error_messages:
            try:
                for message_id in error_messages[user_id]:
                    await message.bot.delete_message(chat_id, message_id)
                del error_messages[user_id]
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

        data['predict'] = message.text
        if get_games(user_id=user_id):

            update_game(user_id=user_id, amount=data['predict'], status="predict")

        else:

            print("ERROR DATABASE")

        chat_id = message.chat.id

        if user_game_state == "dice":
            result_value = random.randint(1, 6)
            index = 2
            win_value = get_games(user_id=user_id).get('bet') * index
            if result_value == int(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé≤ –ö—É–±–∏–∫ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé≤ –ö—É–±–∏–∫ –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "basketball":
            yes_no_list = ["–î–ê", "–ù–ï–¢"]
            random_choice = random.choice(yes_no_list)
            index = 1.75
            win_value = get_games(user_id=user_id).get('bet') * index
            if random_choice == str(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üèÄ –ë–∞—Å–∫–µ—Ç–±–æ–ª –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "football":
            yes_no_list = ["–î–ê", "–ù–ï–¢"]
            random_choice = random.choice(yes_no_list)
            index = 1.5
            win_value = get_games(user_id=user_id).get('bet') * index
            if random_choice == str(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ‚öΩ –§—É—Ç–±–æ–ª –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ‚öΩ –§—É—Ç–±–æ–ª –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "wheel_of_fortune":
            result_value = random.randint(1, 12)
            index = 3
            win_value = get_games(user_id=user_id).get('bet') * index
            if result_value == int(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "coin_toss":
            coin_list = ["–û–†–ï–õ", "–†–ï–®–ö–ê"]
            random_choice = random.choice(coin_list)
            index = 1.5
            win_value = get_games(user_id=user_id).get('bet') * index
            if random_choice == str(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ü™ô –ú–æ–Ω–µ—Ç–∫—É –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ ü™ô –ú–æ–Ω–µ—Ç–∫—É –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "roulette":
            result_value = random.randint(0, 36)
            index = 3.2
            win_value = get_games(user_id=user_id).get('bet') * index
            if result_value == int(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé∞ –†—É–ª–µ—Ç–∫—É –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üé∞ –†—É–ª–µ—Ç–∫—É –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "guess_number":
            result_value = random.randint(1, 9)
            index = 1.66
            win_value = get_games(user_id=user_id).get('bet') * index
            if result_value == int(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        elif user_game_state == "lucky_ticket":
            result_value = random.randint(1, 999)
            index = 100
            win_value = get_games(user_id=user_id).get('bet') * index
            if result_value == int(data['predict']):
                status = True
                updater = int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                text = f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üéüÔ∏è –°—á–∞—Å–ª–∏–≤—ã–π –±–∏–ª–µ—Ç –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{win_value} $ADREF* —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º *x{index}*!"
                update_game(user_id=user_id, amount=status, status="status")
            else:
                status = False
                updater = 0 - int(get_games(user_id=user_id).get('bet'))
                update_balance(user_id=user_id, amount=updater)
                update_game(user_id=user_id, amount=status, status="status")
                text = f"‚ùå –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã –≤ üéüÔ∏è –°—á–∞—Å–ª–∏–≤—ã–π –±–∏–ª–µ—Ç –Ω–µ –≤–µ—Ä–Ω–æ–µ.\nüèÜ –°—É–º–º–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç *{get_games(user_id=user_id).get('bet')} $ADREF*."

        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=data.get('id_to_edit'),
            text=text,
            reply_markup=back_button,
            parse_mode='Markdown',
        )
        delete_games(user_id=user_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.reset_state()

#payment callback
@dp.callback_query_handler(lambda c: c.data == "payment")
async def payment_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    text_warning = (
            f"‚ö†Ô∏è *–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Telegram Username!*\n\n"
            f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
        )

    if username is None:
        await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text_warning,
                reply_markup=back_menu(),
                parse_mode="Markdown"
            )
    else:
        if find_user(user_id=user_id):
            chat_id = callback_query.message.chat.id
            user_data = get_info(user_id)

            first_name = callback_query.from_user.first_name
            balance = user_data["balance"]
            payment_message = (
                f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n\n"
                f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –≤—ã–≤–æ–¥—É: *{balance} $ADREF*\n"
                f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
            )

            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text=payment_message,
                    reply_markup=payment(),
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await bot.answer_callback_query(
                    callback_query.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
        else:
            insert_user(user_id=user_id)
            chat_id = callback_query.message.chat.id
            user_data = get_info(user_id)

            first_name = callback_query.from_user.first_name
            balance = user_data["balance"]
            payment_message = (
                f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n\n"
                f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫ –≤—ã–≤–æ–¥—É: *{balance} $ADREF*\n"
                f"–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç *1000 $ADREF*\n"
                f"1000 $ADREF = 3 $USDT\n"
                f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
            )

            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=callback_query.message.message_id,
                    text=payment_message,
                    reply_markup=payment(),
                    parse_mode="Markdown"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await bot.answer_callback_query(
                    callback_query.id,
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )

@dp.callback_query_handler(lambda c: c.data == "payment_form")
async def payment_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    user_data = get_info(user_id)
    username = callback_query.from_user.username

    if user_data:

        balance = user_data["balance"]

        if balance >= 1000:
            ticket_id = generate_ticket_id(username)
            first_name = callback_query.from_user.username
            status = "opened"

            payment_ticket = (
                f"üëã ‚Ññ{ticket_id}\n\n"
                f"üëÅÔ∏è –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä : @{first_name}\n"
                f"ü™ô –°—É–º–º–∞ : {balance}\n"
                f"üéâ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status}"
            )
            text = (
                f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n\n"
                f"‚úÖ –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ : *{balance} $ADREF*\n"
                f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 72 —á–∞—Å–æ–≤, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—å—Å—è —Å –≤–∞–º–∏\n"
                f"*1000 $ADREF = 3 $USDT*\n"
                f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
            )

            try:
                admin_id = administrators.get("developer")
                await bot.send_message(admin_id, payment_ticket, reply_markup=payment_admin(ticket_id=ticket_id, user_id=user_id, balance=balance))
            except Exception as e:
                print(e)
            
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                reply_markup=back_menu(),
                parse_mode="Markdown"
            )

        else:
            first_name = callback_query.from_user.first_name
            text = (
                f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}!*\n\n"
                f"‚ùå –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: *{balance} $ADREF*\n\n"
                f"–í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –æ—Ç *1000 $ADREF*\n"
                f"1000 $ADREF = 3 $USDT\n\n"
                f"üéâ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
            )
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=callback_query.message.message_id,
                text=text,
                reply_markup=back_menu(),
                parse_mode="Markdown"
            )

#payment admin
@dp.callback_query_handler(lambda c: c.data.startswith("answered_"))
async def payment_admin_callback(callback_query: CallbackQuery):

    ticket_id = callback_query.data.split('_')[1]
    user_id = int(callback_query.data.split('_')[2])
    balance = int(callback_query.data.split('_')[3])
    balance_set = balance - balance
    try:
        delete_ticket(ticket_id=ticket_id)
        set_balance(user_id=user_id, amount=balance_set)
        await bot.answer_callback_query(callback_query.id, text=f"–¢–∏–∫–µ—Ç ‚Ññ{ticket_id} –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")
        await bot.send_message(callback_query.from_user.id, f"–¢–∏–∫–µ—Ç ‚Ññ{ticket_id} –±—ã–ª –∏—Å–ø–æ–ª–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")

    except Exception as e:
        print(e)

#tasks callback
@dp.callback_query_handler(lambda c: c.data == "tasks")
async def payment_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id

    tasks = get_tasks()
    
    if count_tasks() != 0:
        text = f"–ê–∫—Ç–∏–≤–Ω–æ {count_tasks()} –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = InlineKeyboardMarkup(row_width=1)
        for task in tasks:
            button = InlineKeyboardButton(task['name'], callback_data=f"task_{str(task['ticket_id'])}")
            keyboard.add(button)
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_admin")
        keyboard.add(back_button)
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = back_menu()
    
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

#admin callback
@dp.callback_query_handler(lambda c: c.data == "admin")
async def payment_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text="–§—É–Ω–∫—Ü–∏–∏:",
        reply_markup=admin_panel(),
        parse_mode="Markdown"
    )

#tasks admin
@dp.callback_query_handler(lambda c: c.data == "tasks_admin")
async def tasks_admin_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id

    if count_tasks() != 0:
        text = f"–ê–∫—Ç–∏–≤–Ω–æ {count_tasks()} –∑–∞–¥–∞–Ω–∏–π!"
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
    
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=admin_panel_tasks(),
        parse_mode="Markdown"
    )

# list admin
@dp.callback_query_handler(lambda c: c.data == "list_admin")
async def list_admin_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id

    tasks = get_tasks()
    
    if count_tasks() != 0:
        text = f"–ê–∫—Ç–∏–≤–Ω–æ {count_tasks()} –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = InlineKeyboardMarkup(row_width=1)
        for task in tasks:
            button = InlineKeyboardButton(task['name'], callback_data=f"task_{str(task['ticket_id'])}")
            keyboard.add(button)
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_admin")
        keyboard.add(back_button)
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = back_menu_admin()

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("task_"))
async def task_detail_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    task_id = callback_query.data.split('_')[1]

    task = get_task(int(task_id))

    if task:
        text = f"–ó–∞–¥–∞–Ω–∏–µ: {task['name']}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        text += f"–°—Å—ã–ª–∫–∞: {task.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
        keyboard = task_keyboard(task_id)
    else:
        text = "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        keyboard = back_menu_admin()

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

# check sub
@dp.callback_query_handler(lambda c: c.data.startswith("check_subscription_"))
async def check_subscription(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    task_id = callback_query.data.split('_')[2]
    user_id = callback_query.from_user.id

    try:
        user_status = await bot.get_chat_member(CHANNEL_ID, chat_id)

        if user_status.status in ['member', 'administrator', 'creator']:
            if get_completed_tasks(user_id=user_id):
                if get_task_private(user_id=user_id, ticket_id=task_id):
                    text = "–í–∞–º —É–∂–µ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 $ADREF."
                else:
                    text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 $ADREF."
                    update_completed(user_id=user_id, ticket_id=task_id)
                    update_balance(user_id=user_id, amount=100)
            else:
                insert_completed(user_id=user_id, ticket_id=task_id)
                text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 100 $ADREF."
                update_balance(user_id=user_id, amount=100)

        else:
            text = "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
    
    except Exception as e:
        print(e)
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=task_keyboard(task_id),
        parse_mode="Markdown"
    )

#add task
@dp.callback_query_handler(lambda c: c.data == "add_task")
async def add_task_callback(callback_query: types.CallbackQuery, state:FSMContext):
    async with state.proxy() as data:
        await ClientStates.name.set()
        msg = await callback_query.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=back_button_form,
            parse_mode='MarkdownV2',
        )
        data['id_to_edit'] = msg.message_id

@dp.message_handler(state=ClientStates.name)
async def name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text.strip()
        chat_id = message.chat.id
        if data['name']:
            data['random_id'] = add_task(data['name'])
        else:
            print('ERROR TASK')
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=data.get('id_to_edit'),
            text=f"–£—Å–ø–µ—à–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:",
            reply_markup=back_button_form_admin,
            parse_mode='Markdown',
        )
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await ClientStates.link.set()
        
@dp.message_handler(state=ClientStates.link)
async def link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = message.text.strip()
        chat_id = message.chat.id
        if data['link']:
            set_link(data['link'], data.get('random_id'))
        else:
            print('ERROR TASK')
        
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=data.get('id_to_edit'),
            text=f"–£—Å–ø–µ—à–Ω–æ!",
            reply_markup=back_menu_admin(),
            parse_mode='Markdown',
        )
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await state.finish()

#delete task
@dp.callback_query_handler(lambda c: c.data == "delete_task")
async def delete_task_callback(callback_query: types.CallbackQuery, state:FSMContext):
    chat_id = callback_query.message.chat.id

    tasks = get_tasks()
    
    if count_tasks() != 0:
        text = f"–ê–∫—Ç–∏–≤–Ω–æ {count_tasks()} –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = InlineKeyboardMarkup(row_width=1)
        for task in tasks:
            button = InlineKeyboardButton(task['name'], callback_data=f"show_{str(task['ticket_id'])}")
            keyboard.add(button)
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_admin")
        keyboard.add(back_button)
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = back_menu_admin()

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("show_"))
async def delete_task_detail_callback(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    task_id = callback_query.data.split('_')[1]

    task = get_task(int(task_id))

    if task:
        text = f"–ó–∞–¥–∞–Ω–∏–µ: {task['name']}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        text += f"–°—Å—ã–ª–∫–∞: {task.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')}\n"
        keyboard = task_keyboard_delete(task_id)
    else:
        text = "–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        keyboard = back_menu_admin()

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith("0x0_"))
async def check_subscription(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    task_id = str(callback_query.data.split('_')[1])
    user_id = callback_query.from_user.id

    try:
        delete_task(ticket_id=task_id, user_id=user_id)
        text = f"–ó–∞–¥–∞–Ω–∏–µ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {task_id} —É–¥–∞–ª–µ–Ω–æ."
    except Exception as e:
        print(e)
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è."

    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text=text,
        reply_markup=task_keyboard_delete(task_id),
        parse_mode="Markdown"
    )

#referals
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types

@dp.callback_query_handler(lambda c: c.data == "ref")
async def tasks_admin_callback(callback_query: types.CallbackQuery):

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üñáÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="get_ref"),
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É!\n\n"
             "üîπ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.",
        reply_markup=keyboard
    )

@dp.callback_query_handler(lambda c: c.data == "get_ref")
async def get_referral_link(callback_query: types.CallbackQuery):
    referrer_id = callback_query.from_user.id
    bot_username = (await bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={referrer_id}"

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    )

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}",
        reply_markup=keyboard
    )

#back
@dp.callback_query_handler(lambda c: c.data == "back")
async def back_to_games(callback_query: CallbackQuery):

    await bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=games_keyboard()
    )

#back to list admin
@dp.callback_query_handler(lambda c: c.data == "back_to_list_admin")
async def back_to_games(callback_query: CallbackQuery):

    tasks = get_tasks()
    
    if count_tasks() != 0:
        text = f"–ê–∫—Ç–∏–≤–Ω–æ {count_tasks()} –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = InlineKeyboardMarkup(row_width=1)
        for task in tasks:
            button = InlineKeyboardButton(task['name'], callback_data=f"task_{str(task['ticket_id'])}")
            keyboard.add(button)
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu_admin")
        keyboard.add(back_button)
    else:
        text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π!"
        keyboard = back_menu_admin()

    await bot.edit_message_text(
        text=text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=keyboard
    )

#back form
@dp.callback_query_handler(lambda query: query.data == 'back_form', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É üéÆ:',
        reply_markup=games_keyboard(),
        parse_mode='Markdown',
    )
    delete_games(user_id=user_id)
    await state.reset_state()

#back form admin
@dp.callback_query_handler(lambda query: query.data == 'back_form_admin', state='*')
async def back_button_callback(callback_query: types.CallbackQuery, state: FSMContext):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=callback_query.message.message_id,
        text='–§—É–Ω–∫—Ü–∏–∏:',
        reply_markup=admin_panel_tasks(),
        parse_mode='Markdown',
    )
    delete_games(user_id=user_id)
    await state.reset_state()

#main menu
@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard()
    )

#main menu admin
@dp.callback_query_handler(lambda c: c.data == "main_menu_admin")
async def back_to_main_menu(callback_query: CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_keyboard_admin()
    )

#boot
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling()
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
